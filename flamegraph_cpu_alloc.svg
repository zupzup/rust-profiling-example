<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="758" onload="init(evt)" viewBox="0 0 1200 758" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="758" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="741.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="741.00"> </text><svg id="frames" x="10" width="1180"><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2,027 samples, 1.03%)</title><rect x="5.0682%" y="581" width="1.0285%" height="15" fill="rgb(227,0,7)"/><text x="5.3182%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2,027 samples, 1.03%)</title><rect x="5.0682%" y="565" width="1.0285%" height="15" fill="rgb(217,0,24)"/><text x="5.3182%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2,027 samples, 1.03%)</title><rect x="5.0682%" y="549" width="1.0285%" height="15" fill="rgb(221,193,54)"/><text x="5.3182%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2,027 samples, 1.03%)</title><rect x="5.0682%" y="533" width="1.0285%" height="15" fill="rgb(248,212,6)"/><text x="5.3182%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2,027 samples, 1.03%)</title><rect x="5.0682%" y="517" width="1.0285%" height="15" fill="rgb(208,68,35)"/><text x="5.3182%" y="527.50"></text></g><g><title>alloc::alloc::alloc (2,027 samples, 1.03%)</title><rect x="5.0682%" y="501" width="1.0285%" height="15" fill="rgb(232,128,0)"/><text x="5.3182%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (13,831 samples, 7.02%)</title><rect x="0.0426%" y="661" width="7.0176%" height="15" fill="rgb(207,160,47)"/><text x="0.2926%" y="671.50">&lt;alloc::s..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3,926 samples, 1.99%)</title><rect x="5.0682%" y="645" width="1.9920%" height="15" fill="rgb(228,23,34)"/><text x="5.3182%" y="655.50">&lt;..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3,926 samples, 1.99%)</title><rect x="5.0682%" y="629" width="1.9920%" height="15" fill="rgb(218,30,26)"/><text x="5.3182%" y="639.50">a..</text></g><g><title>alloc::slice::hack::to_vec (3,926 samples, 1.99%)</title><rect x="5.0682%" y="613" width="1.9920%" height="15" fill="rgb(220,122,19)"/><text x="5.3182%" y="623.50">a..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3,926 samples, 1.99%)</title><rect x="5.0682%" y="597" width="1.9920%" height="15" fill="rgb(250,228,42)"/><text x="5.3182%" y="607.50">&lt;..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1,899 samples, 0.96%)</title><rect x="6.0967%" y="581" width="0.9635%" height="15" fill="rgb(240,193,28)"/><text x="6.3467%" y="591.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,899 samples, 0.96%)</title><rect x="6.0967%" y="565" width="0.9635%" height="15" fill="rgb(216,20,37)"/><text x="6.3467%" y="575.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (594 samples, 0.30%)</title><rect x="7.0602%" y="661" width="0.3014%" height="15" fill="rgb(206,188,39)"/><text x="7.3102%" y="671.50"></text></g><g><title>rust_profiling_example::handler::cpu_handler::{{closure}} (594 samples, 0.30%)</title><rect x="7.0602%" y="645" width="0.3014%" height="15" fill="rgb(217,207,13)"/><text x="7.3102%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (594 samples, 0.30%)</title><rect x="7.0602%" y="629" width="0.3014%" height="15" fill="rgb(231,73,38)"/><text x="7.3102%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (594 samples, 0.30%)</title><rect x="7.0602%" y="613" width="0.3014%" height="15" fill="rgb(225,20,46)"/><text x="7.3102%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::rfold (594 samples, 0.30%)</title><rect x="7.0602%" y="597" width="0.3014%" height="15" fill="rgb(210,31,41)"/><text x="7.3102%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::rfold (3,520 samples, 1.79%)</title><rect x="7.3616%" y="661" width="1.7860%" height="15" fill="rgb(221,200,47)"/><text x="7.6116%" y="671.50">&lt;..</text></g><g><title>__GI___libc_free (1,107 samples, 0.56%)</title><rect x="9.1476%" y="661" width="0.5617%" height="15" fill="rgb(226,26,5)"/><text x="9.3976%" y="671.50"></text></g><g><title>__GI___libc_malloc (2,481 samples, 1.26%)</title><rect x="9.7093%" y="661" width="1.2588%" height="15" fill="rgb(249,33,26)"/><text x="9.9593%" y="671.50"></text></g><g><title>__memmove_avx_unaligned_erms (727 samples, 0.37%)</title><rect x="10.9681%" y="661" width="0.3689%" height="15" fill="rgb(235,183,28)"/><text x="11.2181%" y="671.50"></text></g><g><title>__rdl_alloc (1,849 samples, 0.94%)</title><rect x="11.3370%" y="661" width="0.9382%" height="15" fill="rgb(221,5,38)"/><text x="11.5870%" y="671.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1,849 samples, 0.94%)</title><rect x="11.3370%" y="645" width="0.9382%" height="15" fill="rgb(247,18,42)"/><text x="11.5870%" y="655.50"></text></g><g><title>_int_free (8,077 samples, 4.10%)</title><rect x="12.2751%" y="661" width="4.0981%" height="15" fill="rgb(241,131,45)"/><text x="12.5251%" y="671.50">_int..</text></g><g><title>[anon] (32,201 samples, 16.34%)</title><rect x="0.0426%" y="677" width="16.3382%" height="15" fill="rgb(249,31,29)"/><text x="0.2926%" y="687.50">[anon]</text></g><g><title>[rust-profiling-example] (725 samples, 0.37%)</title><rect x="16.3813%" y="677" width="0.3679%" height="15" fill="rgb(225,111,53)"/><text x="16.6313%" y="687.50"></text></g><g><title>__GI___libc_malloc (724 samples, 0.37%)</title><rect x="16.3819%" y="661" width="0.3673%" height="15" fill="rgb(238,160,17)"/><text x="16.6319%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::rfold (5,503 samples, 2.79%)</title><rect x="16.7573%" y="661" width="2.7921%" height="15" fill="rgb(214,148,48)"/><text x="17.0073%" y="671.50">&lt;c..</text></g><g><title>core::iter::traits::double_ended::DoubleEndedIterator::rfold (2,737 samples, 1.39%)</title><rect x="18.1607%" y="645" width="1.3887%" height="15" fill="rgb(232,36,49)"/><text x="18.4107%" y="655.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (2,737 samples, 1.39%)</title><rect x="18.1607%" y="629" width="1.3887%" height="15" fill="rgb(209,103,24)"/><text x="18.4107%" y="639.50"></text></g><g><title>core::ops::function::FnMut::call_mut (2,609 samples, 1.32%)</title><rect x="18.2257%" y="613" width="1.3238%" height="15" fill="rgb(229,88,8)"/><text x="18.4757%" y="623.50"></text></g><g><title>__rdl_alloc (913 samples, 0.46%)</title><rect x="19.5799%" y="661" width="0.4632%" height="15" fill="rgb(213,181,19)"/><text x="19.8299%" y="671.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (827 samples, 0.42%)</title><rect x="21.0290%" y="309" width="0.4196%" height="15" fill="rgb(254,191,54)"/><text x="21.2790%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (6,529 samples, 3.31%)</title><rect x="33.8997%" y="261" width="3.3127%" height="15" fill="rgb(241,83,37)"/><text x="34.1497%" y="271.50">&lt;al..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (6,529 samples, 3.31%)</title><rect x="33.8997%" y="245" width="3.3127%" height="15" fill="rgb(233,36,39)"/><text x="34.1497%" y="255.50">&lt;al..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (6,529 samples, 3.31%)</title><rect x="33.8997%" y="229" width="3.3127%" height="15" fill="rgb(226,3,54)"/><text x="34.1497%" y="239.50">all..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (6,529 samples, 3.31%)</title><rect x="33.8997%" y="213" width="3.3127%" height="15" fill="rgb(245,192,40)"/><text x="34.1497%" y="223.50">all..</text></g><g><title>__GI___libc_free (6,975 samples, 3.54%)</title><rect x="38.6844%" y="165" width="3.5390%" height="15" fill="rgb(238,167,29)"/><text x="38.9344%" y="175.50">__G..</text></g><g><title>__rdl_dealloc (1,421 samples, 0.72%)</title><rect x="42.2233%" y="165" width="0.7210%" height="15" fill="rgb(232,182,51)"/><text x="42.4733%" y="175.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1,421 samples, 0.72%)</title><rect x="42.2233%" y="149" width="0.7210%" height="15" fill="rgb(231,60,39)"/><text x="42.4733%" y="159.50"></text></g><g><title>__rust_dealloc (1,395 samples, 0.71%)</title><rect x="42.9443%" y="165" width="0.7078%" height="15" fill="rgb(208,69,12)"/><text x="43.1943%" y="175.50"></text></g><g><title>[unknown] (230 samples, 0.12%)</title><rect x="57.9755%" y="149" width="0.1167%" height="15" fill="rgb(235,93,37)"/><text x="58.2255%" y="159.50"></text></g><g><title>[unknown] (230 samples, 0.12%)</title><rect x="57.9755%" y="133" width="0.1167%" height="15" fill="rgb(213,116,39)"/><text x="58.2255%" y="143.50"></text></g><g><title>[unknown] (224 samples, 0.11%)</title><rect x="57.9786%" y="117" width="0.1137%" height="15" fill="rgb(222,207,29)"/><text x="58.2286%" y="127.50"></text></g><g><title>[unknown] (220 samples, 0.11%)</title><rect x="57.9806%" y="101" width="0.1116%" height="15" fill="rgb(206,96,30)"/><text x="58.2306%" y="111.50"></text></g><g><title>[unknown] (213 samples, 0.11%)</title><rect x="57.9842%" y="85" width="0.1081%" height="15" fill="rgb(218,138,4)"/><text x="58.2342%" y="95.50"></text></g><g><title>[unknown] (210 samples, 0.11%)</title><rect x="57.9857%" y="69" width="0.1066%" height="15" fill="rgb(250,191,14)"/><text x="58.2357%" y="79.50"></text></g><g><title>[unknown] (204 samples, 0.10%)</title><rect x="57.9887%" y="53" width="0.1035%" height="15" fill="rgb(239,60,40)"/><text x="58.2387%" y="63.50"></text></g><g><title>[unknown] (201 samples, 0.10%)</title><rect x="57.9903%" y="37" width="0.1020%" height="15" fill="rgb(206,27,48)"/><text x="58.2403%" y="47.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (46,210 samples, 23.45%)</title><rect x="37.2175%" y="197" width="23.4461%" height="15" fill="rgb(225,35,8)"/><text x="37.4675%" y="207.50">&lt;alloc::alloc::Global as core::alloc:..</text></g><g><title>alloc::alloc::dealloc (46,210 samples, 23.45%)</title><rect x="37.2175%" y="181" width="23.4461%" height="15" fill="rgb(250,213,24)"/><text x="37.4675%" y="191.50">alloc::alloc::dealloc</text></g><g><title>_int_free (33,528 samples, 17.01%)</title><rect x="43.6521%" y="165" width="17.0115%" height="15" fill="rgb(247,123,22)"/><text x="43.9021%" y="175.50">_int_free</text></g><g><title>tcache_put (5,068 samples, 2.57%)</title><rect x="58.0922%" y="149" width="2.5714%" height="15" fill="rgb(231,138,38)"/><text x="58.3422%" y="159.50">tc..</text></g><g><title>core::ptr::drop_in_place (46,234 samples, 23.46%)</title><rect x="37.2135%" y="261" width="23.4583%" height="15" fill="rgb(231,145,46)"/><text x="37.4635%" y="271.50">core::ptr::drop_in_place</text></g><g><title>core::ptr::drop_in_place (46,234 samples, 23.46%)</title><rect x="37.2135%" y="245" width="23.4583%" height="15" fill="rgb(251,118,11)"/><text x="37.4635%" y="255.50">core::ptr::drop_in_place</text></g><g><title>core::ptr::drop_in_place (46,234 samples, 23.46%)</title><rect x="37.2135%" y="229" width="23.4583%" height="15" fill="rgb(217,147,25)"/><text x="37.4635%" y="239.50">core::ptr::drop_in_place</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (46,234 samples, 23.46%)</title><rect x="37.2135%" y="213" width="23.4583%" height="15" fill="rgb(247,81,37)"/><text x="37.4635%" y="223.50">&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core:..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (213 samples, 0.11%)</title><rect x="69.3221%" y="213" width="0.1081%" height="15" fill="rgb(209,12,38)"/><text x="69.5721%" y="223.50"></text></g><g><title>&lt;u64 as core::num::FromStrRadixHelper&gt;::checked_mul (1,385 samples, 0.70%)</title><rect x="69.5261%" y="213" width="0.7027%" height="15" fill="rgb(227,1,9)"/><text x="69.7761%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::checked_mul (1,385 samples, 0.70%)</title><rect x="69.5261%" y="197" width="0.7027%" height="15" fill="rgb(248,47,43)"/><text x="69.7761%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::overflowing_mul (1,385 samples, 0.70%)</title><rect x="69.5261%" y="181" width="0.7027%" height="15" fill="rgb(221,10,30)"/><text x="69.7761%" y="191.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::to_digit (213 samples, 0.11%)</title><rect x="70.2684%" y="213" width="0.1081%" height="15" fill="rgb(210,229,1)"/><text x="70.5184%" y="223.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (97,810 samples, 49.63%)</title><rect x="21.4501%" y="293" width="49.6271%" height="15" fill="rgb(222,148,37)"/><text x="21.7001%" y="303.50">core::iter::adapters::map::map_fold::{{closure}}</text></g><g><title>rust_profiling_example::handler::cpu_handler::{{closure}}::{{closure}} (74,710 samples, 37.91%)</title><rect x="33.1706%" y="277" width="37.9065%" height="15" fill="rgb(234,67,33)"/><text x="33.4206%" y="287.50">rust_profiling_example::handler::cpu_handler::{{closure}}::{{c..</text></g><g><title>core::str::&lt;impl str&gt;::parse (20,508 samples, 10.41%)</title><rect x="60.6718%" y="261" width="10.4054%" height="15" fill="rgb(247,98,35)"/><text x="60.9218%" y="271.50">core::str::&lt;imp..</text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for u64&gt;::from_str (20,443 samples, 10.37%)</title><rect x="60.7048%" y="245" width="10.3724%" height="15" fill="rgb(247,138,52)"/><text x="60.9548%" y="255.50">core::num::&lt;imp..</text></g><g><title>core::num::from_str_radix (20,435 samples, 10.37%)</title><rect x="60.7088%" y="229" width="10.3684%" height="15" fill="rgb(213,79,30)"/><text x="60.9588%" y="239.50">core::num::from..</text></g><g><title>core::str::&lt;impl str&gt;::is_empty (1,381 samples, 0.70%)</title><rect x="70.3765%" y="213" width="0.7007%" height="15" fill="rgb(246,177,23)"/><text x="70.6265%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1,111 samples, 0.56%)</title><rect x="73.4243%" y="245" width="0.5637%" height="15" fill="rgb(230,62,27)"/><text x="73.6743%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (552 samples, 0.28%)</title><rect x="73.7080%" y="229" width="0.2801%" height="15" fill="rgb(216,154,8)"/><text x="73.9580%" y="239.50"></text></g><g><title>[rust-profiling-example] (3,935 samples, 2.00%)</title><rect x="75.1646%" y="101" width="1.9965%" height="15" fill="rgb(244,35,45)"/><text x="75.4146%" y="111.50">[..</text></g><g><title>__GI___libc_malloc (3,935 samples, 2.00%)</title><rect x="75.1646%" y="85" width="1.9965%" height="15" fill="rgb(251,115,12)"/><text x="75.4146%" y="95.50">_..</text></g><g><title>checked_request2size (2,227 samples, 1.13%)</title><rect x="87.3165%" y="85" width="1.1299%" height="15" fill="rgb(240,54,50)"/><text x="87.5665%" y="95.50"></text></g><g><title>__GI___libc_malloc (32,569 samples, 16.52%)</title><rect x="77.1637%" y="101" width="16.5249%" height="15" fill="rgb(233,84,52)"/><text x="77.4137%" y="111.50">__GI___libc_malloc</text></g><g><title>tcache_get (10,332 samples, 5.24%)</title><rect x="88.4464%" y="85" width="5.2423%" height="15" fill="rgb(207,117,47)"/><text x="88.6964%" y="95.50">tcache..</text></g><g><title>__rdl_alloc (3,394 samples, 1.72%)</title><rect x="93.6887%" y="101" width="1.7221%" height="15" fill="rgb(249,43,39)"/><text x="93.9387%" y="111.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (3,369 samples, 1.71%)</title><rect x="93.7014%" y="85" width="1.7094%" height="15" fill="rgb(209,38,44)"/><text x="93.9514%" y="95.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (42,191 samples, 21.41%)</title><rect x="74.7217%" y="149" width="21.4070%" height="15" fill="rgb(236,212,23)"/><text x="74.9717%" y="159.50">&lt;alloc::alloc::Global as core::all..</text></g><g><title>alloc::alloc::Global::alloc_impl (42,191 samples, 21.41%)</title><rect x="74.7217%" y="133" width="21.4070%" height="15" fill="rgb(242,79,21)"/><text x="74.9717%" y="143.50">alloc::alloc::Global::alloc_impl</text></g><g><title>alloc::alloc::alloc (41,702 samples, 21.16%)</title><rect x="74.9698%" y="117" width="21.1589%" height="15" fill="rgb(211,96,35)"/><text x="75.2198%" y="127.50">alloc::alloc::alloc</text></g><g><title>__rust_alloc (1,415 samples, 0.72%)</title><rect x="95.4107%" y="101" width="0.7179%" height="15" fill="rgb(253,215,40)"/><text x="95.6607%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (42,288 samples, 21.46%)</title><rect x="74.6760%" y="197" width="21.4562%" height="15" fill="rgb(211,81,21)"/><text x="74.9260%" y="207.50">alloc::vec::Vec&lt;T,A&gt;::with_capacit..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (42,288 samples, 21.46%)</title><rect x="74.6760%" y="181" width="21.4562%" height="15" fill="rgb(208,190,38)"/><text x="74.9260%" y="191.50">alloc::raw_vec::RawVec&lt;T,A&gt;::with_..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (42,288 samples, 21.46%)</title><rect x="74.6760%" y="165" width="21.4562%" height="15" fill="rgb(235,213,38)"/><text x="74.9260%" y="175.50">alloc::raw_vec::RawVec&lt;T,A&gt;::alloc..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (51,791 samples, 26.28%)</title><rect x="73.4243%" y="261" width="26.2778%" height="15" fill="rgb(237,122,38)"/><text x="73.6743%" y="271.50">&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clon..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (50,680 samples, 25.71%)</title><rect x="73.9880%" y="245" width="25.7141%" height="15" fill="rgb(244,218,35)"/><text x="74.2380%" y="255.50">alloc::slice::&lt;impl [T]&gt;::to_vec_in</text></g><g><title>alloc::slice::hack::to_vec (50,680 samples, 25.71%)</title><rect x="73.9880%" y="229" width="25.7141%" height="15" fill="rgb(240,68,47)"/><text x="74.2380%" y="239.50">alloc::slice::hack::to_vec</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (50,680 samples, 25.71%)</title><rect x="73.9880%" y="213" width="25.7141%" height="15" fill="rgb(210,16,53)"/><text x="74.2380%" y="223.50">&lt;T as alloc::slice::hack::ConvertVec&gt;::to..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (7,036 samples, 3.57%)</title><rect x="96.1322%" y="197" width="3.5699%" height="15" fill="rgb(235,124,12)"/><text x="96.3822%" y="207.50">core..</text></g><g><title>core::intrinsics::copy_nonoverlapping (7,036 samples, 3.57%)</title><rect x="96.1322%" y="181" width="3.5699%" height="15" fill="rgb(224,169,11)"/><text x="96.3822%" y="191.50">core..</text></g><g><title>__memmove_avx_unaligned_erms (6,429 samples, 3.26%)</title><rect x="96.4402%" y="165" width="3.2620%" height="15" fill="rgb(250,166,2)"/><text x="96.6902%" y="175.50">__m..</text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (55,247 samples, 28.03%)</title><rect x="71.7190%" y="277" width="28.0314%" height="15" fill="rgb(242,216,29)"/><text x="71.9690%" y="287.50">&lt;alloc::string::String as core::clone::Clone&gt;..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::rfold (155,819 samples, 79.06%)</title><rect x="20.6926%" y="341" width="79.0598%" height="15" fill="rgb(230,116,27)"/><text x="20.9426%" y="351.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::rfold</text></g><g><title>core::iter::traits::double_ended::DoubleEndedIterator::rfold (155,626 samples, 78.96%)</title><rect x="20.7905%" y="325" width="78.9619%" height="15" fill="rgb(228,99,48)"/><text x="21.0405%" y="335.50">core::iter::traits::double_ended::DoubleEndedIterator::rfold</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (154,326 samples, 78.30%)</title><rect x="21.4501%" y="309" width="78.3023%" height="15" fill="rgb(253,11,6)"/><text x="21.7001%" y="319.50">core::iter::adapters::map::map_fold::{{closure}}</text></g><g><title>core::ops::function::FnMut::call_mut (56,516 samples, 28.68%)</title><rect x="71.0772%" y="293" width="28.6752%" height="15" fill="rgb(247,143,39)"/><text x="71.3272%" y="303.50">core::ops::function::FnMut::call_mut</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (156,252 samples, 79.28%)</title><rect x="20.4749%" y="389" width="79.2795%" height="15" fill="rgb(236,97,10)"/><text x="20.7249%" y="399.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (156,252 samples, 79.28%)</title><rect x="20.4749%" y="373" width="79.2795%" height="15" fill="rgb(233,208,19)"/><text x="20.7249%" y="383.50">&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::rfold (156,252 samples, 79.28%)</title><rect x="20.4749%" y="357" width="79.2795%" height="15" fill="rgb(216,164,2)"/><text x="20.7249%" y="367.50">&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::rfold</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (157,152 samples, 79.74%)</title><rect x="20.0452%" y="421" width="79.7362%" height="15" fill="rgb(220,129,5)"/><text x="20.2952%" y="431.50">&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>rust_profiling_example::handler::cpu_handler::{{closure}} (157,152 samples, 79.74%)</title><rect x="20.0452%" y="405" width="79.7362%" height="15" fill="rgb(242,17,10)"/><text x="20.2952%" y="415.50">rust_profiling_example::handler::cpu_handler::{{closure}}</text></g><g><title>&lt;warp::filter::and_then::AndThenFuture&lt;T,F&gt; as core::future::future::Future&gt;::poll (157,154 samples, 79.74%)</title><rect x="20.0452%" y="469" width="79.7372%" height="15" fill="rgb(242,107,0)"/><text x="20.2952%" y="479.50">&lt;warp::filter::and_then::AndThenFuture&lt;T,F&gt; as core::future::future::Future&gt;::poll</text></g><g><title>&lt;warp::filter::and_then::State&lt;T,F&gt; as core::future::future::Future&gt;::poll (157,154 samples, 79.74%)</title><rect x="20.0452%" y="453" width="79.7372%" height="15" fill="rgb(251,28,31)"/><text x="20.2952%" y="463.50">&lt;warp::filter::and_then::State&lt;T,F&gt; as core::future::future::Future&gt;::poll</text></g><g><title>&lt;F as futures_core::future::TryFuture&gt;::try_poll (157,154 samples, 79.74%)</title><rect x="20.0452%" y="437" width="79.7372%" height="15" fill="rgb(233,223,10)"/><text x="20.2952%" y="447.50">&lt;F as futures_core::future::TryFuture&gt;::try_poll</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (157,158 samples, 79.74%)</title><rect x="20.0441%" y="661" width="79.7392%" height="15" fill="rgb(215,21,27)"/><text x="20.2941%" y="671.50">hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_inner (157,158 samples, 79.74%)</title><rect x="20.0441%" y="645" width="79.7392%" height="15" fill="rgb(232,23,21)"/><text x="20.2941%" y="655.50">hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_inner</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_loop (157,158 samples, 79.74%)</title><rect x="20.0441%" y="629" width="79.7392%" height="15" fill="rgb(244,5,23)"/><text x="20.2941%" y="639.50">hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_loop</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_write (157,156 samples, 79.74%)</title><rect x="20.0452%" y="613" width="79.7382%" height="15" fill="rgb(226,81,46)"/><text x="20.2952%" y="623.50">hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_write</text></g><g><title>&lt;hyper::proto::h1::dispatch::Server&lt;S,hyper::body::body::Body&gt; as hyper::proto::h1::dispatch::Dispatch&gt;::poll_msg (157,156 samples, 79.74%)</title><rect x="20.0452%" y="597" width="79.7382%" height="15" fill="rgb(247,70,30)"/><text x="20.2952%" y="607.50">&lt;hyper::proto::h1::dispatch::Server&lt;S,hyper::body::body::Body&gt; as hyper::proto::h1::dispatch::Dispatch&gt;::poll_msg</text></g><g><title>&lt;warp::filter::service::FilteredFuture&lt;F&gt; as core::future::future::Future&gt;::poll (157,156 samples, 79.74%)</title><rect x="20.0452%" y="581" width="79.7382%" height="15" fill="rgb(212,68,19)"/><text x="20.2952%" y="591.50">&lt;warp::filter::service::FilteredFuture&lt;F&gt; as core::future::future::Future&gt;::poll</text></g><g><title>warp::route::set (157,156 samples, 79.74%)</title><rect x="20.0452%" y="565" width="79.7382%" height="15" fill="rgb(240,187,13)"/><text x="20.2952%" y="575.50">warp::route::set</text></g><g><title>scoped_tls::ScopedKey&lt;T&gt;::set (157,156 samples, 79.74%)</title><rect x="20.0452%" y="549" width="79.7382%" height="15" fill="rgb(223,113,26)"/><text x="20.2952%" y="559.50">scoped_tls::ScopedKey&lt;T&gt;::set</text></g><g><title>&lt;warp::filter::service::FilteredFuture&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (157,156 samples, 79.74%)</title><rect x="20.0452%" y="533" width="79.7382%" height="15" fill="rgb(206,192,2)"/><text x="20.2952%" y="543.50">&lt;warp::filter::service::FilteredFuture&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}}</text></g><g><title>&lt;F as futures_core::future::TryFuture&gt;::try_poll (157,156 samples, 79.74%)</title><rect x="20.0452%" y="517" width="79.7382%" height="15" fill="rgb(241,108,4)"/><text x="20.2952%" y="527.50">&lt;F as futures_core::future::TryFuture&gt;::try_poll</text></g><g><title>&lt;warp::filter::or::EitherFuture&lt;T,U&gt; as core::future::future::Future&gt;::poll (157,156 samples, 79.74%)</title><rect x="20.0452%" y="501" width="79.7382%" height="15" fill="rgb(247,173,49)"/><text x="20.2952%" y="511.50">&lt;warp::filter::or::EitherFuture&lt;T,U&gt; as core::future::future::Future&gt;::poll</text></g><g><title>&lt;F as futures_core::future::TryFuture&gt;::try_poll (157,156 samples, 79.74%)</title><rect x="20.0452%" y="485" width="79.7382%" height="15" fill="rgb(224,114,35)"/><text x="20.2952%" y="495.50">&lt;F as futures_core::future::TryFuture&gt;::try_poll</text></g><g><title>[unknown] (163,683 samples, 83.05%)</title><rect x="16.7492%" y="677" width="83.0499%" height="15" fill="rgb(245,159,27)"/><text x="16.9992%" y="687.50">[unknown]</text></g><g><title>all (197,090 samples, 100%)</title><rect x="0.0000%" y="709" width="100.0000%" height="15" fill="rgb(245,172,44)"/><text x="0.2500%" y="719.50"></text></g><g><title>tokio-runtime-w (197,009 samples, 99.96%)</title><rect x="0.0411%" y="693" width="99.9589%" height="15" fill="rgb(236,23,11)"/><text x="0.2911%" y="703.50">tokio-runtime-w</text></g><g><title>_int_free (281 samples, 0.14%)</title><rect x="99.8574%" y="677" width="0.1426%" height="15" fill="rgb(205,117,38)"/><text x="100.1074%" y="687.50"></text></g></svg></svg>